<templateSet group="BenWhitehead Scala">
  <template name="soutv" value="println(s&quot;$EXPR_COPY$ = $${$EXPR$}&quot;)" description="Print a value to std out" toReformat="false" toShortenFQNames="true">
    <variable name="EXPR" expression="Suggest Scala variable macro" defaultValue="false" alwaysStopAt="true" />
    <variable name="EXPR_COPY" expression="EXPR" defaultValue="" alwaysStopAt="false" />
  </template>
  <template name="soutm" value="println(s&quot;$METHOD_NAME$($PARAMETERS$)&quot;)" description="Print method name and parameters to std out" toReformat="true" toShortenFQNames="true">
    <variable name="METHOD_NAME" expression="methodName()" defaultValue="" alwaysStopAt="false" />
    <variable name="PARAMETERS" expression="groovyScript(&quot;_1.collect {it + ' = $' + it }.join(', ')&quot;, methodParameters())" defaultValue="" alwaysStopAt="false" />
  </template>
  <template name="2scala" value="import scala.collection.JavaConverters._" description="" toReformat="false" toShortenFQNames="true" />
  <template name="trym" value="scala.util.Try($EXPR$) match {&#10;  case scala.util.Success($VAR$) =&gt; $END$&#10;  case scala.util.Failure($EX$) =&gt;&#10;}" description="Create a scala.util.Try and associated matcher" toReformat="false" toShortenFQNames="true">
    <variable name="EXPR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR" expression="" defaultValue="&quot;x&quot;" alwaysStopAt="true" />
    <variable name="EX" expression="" defaultValue="&quot;t: Throwable&quot;" alwaysStopAt="true" />
  </template>
  <template name="cev" value="collector.emit(new Values($END$))" description="Emit a value to a Storm collector" toReformat="false" toShortenFQNames="true" />
  <template name="snip" value="$END$&#10;Snippet(&#10;  &quot;$DATE$&quot;,&#10;  &quot;&quot;&quot;&#10;    |$DATA$&#10;  &quot;&quot;&quot;.stripMargin&#10;)," description="Stub a snippet" toReformat="true" toShortenFQNames="true">
    <variable name="DATE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DATA" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="SCALA_CODE" value="true" />
    </context>
  </template>
  <template name="cdec" value="implicit val decode$TYPE_COPY$: io.circe.Decoder[$TYPE$] = io.circe.Decoder.instance { c: io.circe.HCursor =&gt;&#10;  for {&#10;    $END$&#10;  } yield $TYPE_COPY$()&#10;}" description="Circe Decoder" toReformat="true" toShortenFQNames="true">
    <variable name="TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TYPE_COPY" expression="TYPE" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="SCALA_CODE" value="true" />
    </context>
  </template>
</templateSet>